{"ast":null,"code":"var _jsxFileName = \"C:\\\\Internship\\\\onchain voting\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport VotingABI from \"./VotingABI.json\";\n\n// REPLACE with your deployed contract address AFTER deployment\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"REPLACE_WITH_CONTRACT_ADDRESS\";\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [parties, setParties] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [txProcessing, setTxProcessing] = useState(false);\n  useEffect(() => {\n    if (window.ethereum) {\n      const prov = new ethers.BrowserProvider(window.ethereum);\n      setProvider(prov);\n    }\n  }, []);\n  useEffect(() => {\n    if (provider && CONTRACT_ADDRESS !== \"REPLACE_WITH_CONTRACT_ADDRESS\") {\n      const c = new ethers.Contract(CONTRACT_ADDRESS, VotingABI, provider);\n      setContract(c);\n      loadParties(c);\n    }\n  }, [provider]);\n  async function connectWallet() {\n    if (!window.ethereum) return alert(\"Install MetaMask\");\n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    setAccount(accounts[0]);\n    const signer = await new ethers.BrowserProvider(window.ethereum).getSigner();\n    setSigner(signer);\n    if (CONTRACT_ADDRESS && VotingABI) {\n      const contractWithSigner = new ethers.Contract(CONTRACT_ADDRESS, VotingABI, signer);\n      setContract(contractWithSigner);\n      loadParties(contractWithSigner);\n    }\n  }\n  async function loadParties(c) {\n    try {\n      setLoading(true);\n      const res = await c.getParties();\n      const names = res[0];\n      const counts = res[1].map(n => n.toString());\n      const arr = names.map((n, i) => ({\n        name: n,\n        count: counts[i],\n        index: i\n      }));\n      setParties(arr);\n    } catch (err) {\n      console.error(\"Failed to load parties\", err);\n    } finally {\n      setLoading(false);\n    }\n  }\n  async function handleVote(index) {\n    if (!signer) return alert(\"Connect wallet first\");\n    try {\n      setTxProcessing(true);\n      const c = contract.connect ? contract.connect(signer) : contract;\n      const tx = await c.vote(index);\n      await tx.wait();\n      alert(\"Vote successful!\");\n      await loadParties(c);\n    } catch (err) {\n      var _err$data;\n      console.error(err);\n      const reason = (err === null || err === void 0 ? void 0 : (_err$data = err.data) === null || _err$data === void 0 ? void 0 : _err$data.message) || (err === null || err === void 0 ? void 0 : err.message) || \"Transaction failed\";\n      alert(reason);\n    } finally {\n      setTxProcessing(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"On-Chain Voting (Wallet Only)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), account ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Connected: \", account]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectWallet,\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading parties...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: parties.map(party => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [party.name, \" - Votes: \", party.count, /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: txProcessing,\n            onClick: () => handleVote(party.index),\n            children: \"Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this)]\n        }, party.index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jdKWNh3Q0YePdk5JFKAJ/WiSA40=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","VotingABI","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","App","_s","provider","setProvider","signer","setSigner","contract","setContract","account","setAccount","parties","setParties","loading","setLoading","txProcessing","setTxProcessing","window","ethereum","prov","BrowserProvider","c","Contract","loadParties","connectWallet","alert","accounts","request","method","getSigner","contractWithSigner","res","getParties","names","counts","map","n","toString","arr","i","name","count","index","err","console","error","handleVote","connect","tx","vote","wait","_err$data","reason","data","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","party","disabled","_c","$RefreshReg$"],"sources":["C:/Internship/onchain voting/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport VotingABI from \"./VotingABI.json\";\r\n\r\n// REPLACE with your deployed contract address AFTER deployment\r\nconst CONTRACT_ADDRESS = \"REPLACE_WITH_CONTRACT_ADDRESS\";\r\n\r\nfunction App() {\r\n  const [provider, setProvider] = useState(null);\r\n  const [signer, setSigner] = useState(null);\r\n  const [contract, setContract] = useState(null);\r\n  const [account, setAccount] = useState(null);\r\n  const [parties, setParties] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [txProcessing, setTxProcessing] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (window.ethereum) {\r\n      const prov = new ethers.BrowserProvider(window.ethereum);\r\n      setProvider(prov);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (provider && CONTRACT_ADDRESS !== \"REPLACE_WITH_CONTRACT_ADDRESS\") {\r\n      const c = new ethers.Contract(CONTRACT_ADDRESS, VotingABI, provider);\r\n      setContract(c);\r\n      loadParties(c);\r\n    }\r\n  }, [provider]);\r\n\r\n  async function connectWallet() {\r\n    if (!window.ethereum) return alert(\"Install MetaMask\");\r\n    const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n    setAccount(accounts[0]);\r\n    const signer = await (new ethers.BrowserProvider(window.ethereum)).getSigner();\r\n    setSigner(signer);\r\n    if (CONTRACT_ADDRESS && VotingABI) {\r\n      const contractWithSigner = new ethers.Contract(CONTRACT_ADDRESS, VotingABI, signer);\r\n      setContract(contractWithSigner);\r\n      loadParties(contractWithSigner);\r\n    }\r\n  }\r\n\r\n  async function loadParties(c) {\r\n    try {\r\n      setLoading(true);\r\n      const res = await c.getParties();\r\n      const names = res[0];\r\n      const counts = res[1].map(n => n.toString());\r\n      const arr = names.map((n, i) => ({ name: n, count: counts[i], index: i }));\r\n      setParties(arr);\r\n    } catch (err) {\r\n      console.error(\"Failed to load parties\", err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  async function handleVote(index) {\r\n    if (!signer) return alert(\"Connect wallet first\");\r\n    try {\r\n      setTxProcessing(true);\r\n      const c = contract.connect ? contract.connect(signer) : contract;\r\n      const tx = await c.vote(index);\r\n      await tx.wait();\r\n      alert(\"Vote successful!\");\r\n      await loadParties(c);\r\n    } catch (err) {\r\n      console.error(err);\r\n      const reason = err?.data?.message || err?.message || \"Transaction failed\";\r\n      alert(reason);\r\n    } finally {\r\n      setTxProcessing(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>On-Chain Voting (Wallet Only)</h1>\r\n        {account ? (\r\n          <div>Connected: {account}</div>\r\n        ) : (\r\n          <button onClick={connectWallet}>Connect Wallet</button>\r\n        )}\r\n\r\n        {loading ? (\r\n          <p>Loading parties...</p>\r\n        ) : (\r\n          <ul>\r\n            {parties.map(party => (\r\n              <li key={party.index}>\r\n                {party.name} - Votes: {party.count}\r\n                <button disabled={txProcessing} onClick={() => handleVote(party.index)}>\r\n                  Vote\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}